#version 450

#extension GL_GOOGLE_include_directive : require

#include "../common.glsl"

// ------------------------------------------------------------------
// DEFINES ----------------------------------------------------------
// ------------------------------------------------------------------

#define NUM_THREADS_X 32
#define NUM_THREADS_Y 32
#define G_BUFFER_MIP 1
#define NORMAL_DISTANCE 0.1f
#define PLANE_DISTANCE 5.0f

// ------------------------------------------------------------------
// INPUTS -----------------------------------------------------------
// ------------------------------------------------------------------

layout(local_size_x = NUM_THREADS_X, local_size_y = NUM_THREADS_Y, local_size_z = 1) in;

// ------------------------------------------------------------------
// DESCRIPTOR SETS --------------------------------------------------
// ------------------------------------------------------------------

// Current Reprojection Write DS
layout(set = 0, binding = 0, r16f) uniform writeonly image2D i_Output;
layout(set = 0, binding = 1, r16f) uniform writeonly image2D i_HistoryLength;

// Current G-buffer DS
layout(set = 1, binding = 0) uniform sampler2D s_GBuffer1; // RGB: Albedo, A: Metallic
layout(set = 1, binding = 1) uniform sampler2D s_GBuffer2; // RG: Normal, BA: Motion Vector
layout(set = 1, binding = 2) uniform sampler2D s_GBuffer3; // R: Roughness, G: Curvature, B: Mesh ID, A: Linear Z
layout(set = 1, binding = 3) uniform sampler2D s_GBufferDepth;

// Previous G-Buffer DS
layout(set = 2, binding = 0) uniform sampler2D s_PrevGBuffer1; // RGB: Albedo, A: Metallic
layout(set = 2, binding = 1) uniform sampler2D s_PrevGBuffer2; // RG: Normal, BA: Motion Vector
layout(set = 2, binding = 2) uniform sampler2D s_PrevGBuffer3; // R: Roughness, G: Curvature, B: Mesh ID, A: Linear Z
layout(set = 2, binding = 3) uniform sampler2D s_PrevGBufferDepth;

layout(set = 3, binding = 0) uniform sampler2D s_Input;

// Previous Reprojection Read DS
layout(set = 4, binding = 0) uniform sampler2D s_PrevAO;

layout(set = 5, binding = 1) uniform sampler2D s_PrevHistoryLength;

// Per Frame UBO
layout(set = 6, binding = 0) uniform PerFrameUBO
{
    mat4  view_inverse;
    mat4  proj_inverse;
    mat4  view_proj_inverse;
    mat4  prev_view_proj;
    mat4  view_proj;
    vec4  cam_pos;
    vec4  current_prev_jitter;
    Light light;
}
u_GlobalUBO;

// ------------------------------------------------------------------
// PUSH CONSTANTS ---------------------------------------------------
// ------------------------------------------------------------------

layout(push_constant) uniform PushConstants
{
    float alpha;
}
u_PushConstants;

// ------------------------------------------------------------------
// FUNCTIONS --------------------------------------------------------
// ------------------------------------------------------------------

bool plane_distance_disocclusion_check(vec3 current_pos, vec3 history_pos, vec3 current_normal)
{
    vec3  to_current    = current_pos - history_pos;
    float dist_to_plane = abs(dot(to_current, current_normal));

    return dist_to_plane > PLANE_DISTANCE;
}

// ------------------------------------------------------------------------

bool out_of_frame_disocclusion_check(ivec2 coord)
{
    const ivec2 imageDim = textureSize(s_Input, 0);

    // check whether reprojected pixel is inside of the screen
    if (any(lessThan(coord, ivec2(1, 1))) || any(greaterThan(coord, imageDim - ivec2(1, 1))))
        return true;
    else
        return false;
}

// ------------------------------------------------------------------------

bool mesh_id_disocclusion_check(float mesh_id, float mesh_id_prev)
{
    if (mesh_id == mesh_id_prev)
        return false;
    else
        return true;
}

// ------------------------------------------------------------------------

bool normals_disocclusion_check(vec3 current_normal, vec3 history_normal)
{
    if (pow(abs(dot(current_normal, history_normal)), 2) > NORMAL_DISTANCE)
        return false;
    else
        return true;
}

// ------------------------------------------------------------------------

bool is_reprojection_valid(ivec2 coord, vec3 current_pos, vec3 history_pos, vec3 current_normal, vec3 history_normal, float current_mesh_id, float history_mesh_id)
{
    // check if the history sample is within the frame
    if (out_of_frame_disocclusion_check(coord)) return false;

    // check if the history belongs to the same surface
    if (mesh_id_disocclusion_check(current_mesh_id, history_mesh_id)) return false;

    // check if history sample is on the same plane
    if (plane_distance_disocclusion_check(current_pos, history_pos, current_normal)) return false;

    // check normals for compatibility
    if (normals_disocclusion_check(current_normal, history_normal)) return false;

    return true;
}

// ------------------------------------------------------------------------

vec3 octohedral_to_direction(vec2 e)
{
    vec3 v = vec3(e, 1.0 - abs(e.x) - abs(e.y));
    if (v.z < 0.0)
        v.xy = (1.0 - abs(v.yx)) * (step(0.0, v.xy) * 2.0 - vec2(1.0));
    return normalize(v);
}

// ------------------------------------------------------------------------

vec3 world_position_from_depth(vec2 tex_coords, float ndc_depth)
{
    // Take texture coordinate and remap to [-1.0, 1.0] range.
    vec2 screen_pos = tex_coords * 2.0 - 1.0;

    // // Create NDC position.
    vec4 ndc_pos = vec4(screen_pos, ndc_depth, 1.0);

    // Transform back into world position.
    vec4 world_pos = u_GlobalUBO.view_proj_inverse * ndc_pos;

    // Undo projection.
    world_pos = world_pos / world_pos.w;

    return world_pos.xyz;
}

// ------------------------------------------------------------------

bool load_prev_data(ivec2 frag_coord, float depth, out float prev_ao, out float history_length)
{
    const ivec2 ipos         = frag_coord;
    const vec2  image_dim    = vec2(textureSize(s_PrevAO, 0));
    const vec2  pixel_center = vec2(frag_coord) + vec2(0.5);
    const vec2  tex_coord    = pixel_center / vec2(image_dim);

    vec4 center_g_buffer_2 = texelFetch(s_GBuffer2, ipos, G_BUFFER_MIP);
    vec4 center_g_buffer_3 = texelFetch(s_GBuffer3, ipos, G_BUFFER_MIP);

    vec3  current_normal  = octohedral_to_direction(center_g_buffer_2.xy);
    vec2  current_motion  = center_g_buffer_2.zw;
    float current_mesh_id = center_g_buffer_3.z;
    vec3  current_pos     = world_position_from_depth(tex_coord, depth);

    // +0.5 to account for texel center offset
    const ivec2 ipos_prev = ivec2(vec2(ipos) + current_motion.xy * image_dim + vec2(0.5, 0.5));

    prev_ao = 0.0f;

    bool       v[4];
    const vec2 pos_prev          = floor(frag_coord.xy) + current_motion.xy * image_dim;
    const vec2 history_tex_coord = tex_coord + current_motion.xy;
    ivec2      offset[4]         = { ivec2(0, 0), ivec2(1, 0), ivec2(0, 1), ivec2(1, 1) };

    // check for all 4 taps of the bilinear filter for validity
    bool valid = false;
    for (int sampleIdx = 0; sampleIdx < 4; sampleIdx++)
    {
        ivec2 loc = ivec2(pos_prev) + offset[sampleIdx];

        vec4  sample_g_buffer_2 = texelFetch(s_PrevGBuffer2, loc, G_BUFFER_MIP);
        vec4  sample_g_buffer_3 = texelFetch(s_PrevGBuffer3, loc, G_BUFFER_MIP);
        float sample_depth      = texelFetch(s_PrevGBufferDepth, loc, G_BUFFER_MIP).r;

        vec3  history_normal  = octohedral_to_direction(sample_g_buffer_2.xy);
        float history_mesh_id = sample_g_buffer_3.z;
        vec3  history_pos     = world_position_from_depth(history_tex_coord, sample_depth);

        v[sampleIdx] = is_reprojection_valid(ipos_prev, current_pos, history_pos, current_normal, history_normal, current_mesh_id, history_mesh_id);

        valid = valid || v[sampleIdx];
    }

    if (valid)
    {
        float sumw = 0;
        float x    = fract(pos_prev.x);
        float y    = fract(pos_prev.y);

        // bilinear weights
        float w[4] = { (1 - x) * (1 - y),
                       x * (1 - y),
                       (1 - x) * y,
                       x * y };

        prev_ao = 0.0f;

        // perform the actual bilinear interpolation
        for (int sampleIdx = 0; sampleIdx < 4; sampleIdx++)
        {
            ivec2 loc = ivec2(pos_prev) + offset[sampleIdx];

            if (v[sampleIdx])
            {
                prev_ao += w[sampleIdx] * texelFetch(s_PrevAO, loc, 0).r;
                sumw += w[sampleIdx];
            }
        }

        // redistribute weights in case not all taps were used
        valid   = (sumw >= 0.01);
        prev_ao = valid ? prev_ao / sumw : 0.0f;
    }
    if (!valid) // perform cross-bilateral filter in the hope to find some suitable samples somewhere
    {
        float cnt = 0.0;

        // this code performs a binary descision for each tap of the cross-bilateral filter
        const int radius = 1;
        for (int yy = -radius; yy <= radius; yy++)
        {
            for (int xx = -radius; xx <= radius; xx++)
            {
                ivec2 p = ipos_prev + ivec2(xx, yy);

                vec4  sample_g_buffer_2 = texelFetch(s_PrevGBuffer2, p, G_BUFFER_MIP);
                vec4  sample_g_buffer_3 = texelFetch(s_PrevGBuffer3, p, G_BUFFER_MIP);
                float sample_depth      = texelFetch(s_PrevGBufferDepth, p, G_BUFFER_MIP).r;

                vec3  history_normal  = octohedral_to_direction(sample_g_buffer_2.xy);
                float history_mesh_id = sample_g_buffer_3.z;
                vec3  history_pos     = world_position_from_depth(history_tex_coord, sample_depth);

                if (is_reprojection_valid(ipos_prev, current_pos, history_pos, current_normal, history_normal, current_mesh_id, history_mesh_id))
                {
                    prev_ao += texelFetch(s_PrevAO, p, 0).r;
                    cnt += 1.0;
                }
            }
        }
        if (cnt > 0)
        {
            valid = true;
            prev_ao /= cnt;
        }
    }

    if (valid)
        history_length = texelFetch(s_PrevHistoryLength, ipos_prev, 0).r;
    else
    {
        prev_ao        = 0.0f;
        history_length = 0.0f;
    }

    return valid;
}

// ------------------------------------------------------------------
// MAIN -------------------------------------------------------------
// ------------------------------------------------------------------

void main()
{
    const ivec2 size          = textureSize(s_Input, 0);
    const ivec2 current_coord = ivec2(gl_GlobalInvocationID.xy);

    float depth = texelFetch(s_GBufferDepth, current_coord, G_BUFFER_MIP).r;

    if (depth == 1.0f)
    {
        imageStore(i_Output, current_coord, vec4(0.0f));
        imageStore(i_HistoryLength, current_coord, uvec4(0));
        return;
    }

    float ao = texelFetch(s_Input, current_coord, 0).r;

    float history_length;
    float prev_ao;
    bool  success  = load_prev_data(current_coord,
                                  depth,
                                  prev_ao,
                                  history_length);
    history_length = min(32.0, success ? history_length + 1.0f : 1.0f);

    // this adjusts the alpha for the case where insufficient history is available.
    // It boosts the temporal accumulation to give the samples equal weights in
    // the beginning.
    const float alpha = success ? max(u_PushConstants.alpha, 1.0 / history_length) : 1.0;

    float out_ao = mix(prev_ao, ao, alpha);

    // temporal integration
    imageStore(i_Output, current_coord, vec4(out_ao));
    imageStore(i_HistoryLength, current_coord, vec4(history_length));
}

// ------------------------------------------------------------------