#version 450

#extension GL_GOOGLE_include_directive : require

#include "common.glsl"

// ------------------------------------------------------------------
// DEFINES ----------------------------------------------------------
// ------------------------------------------------------------------

#define NUM_THREADS 32
#define RADIUS 1
#define SPATIAL_REUSE_SIZE 3

// ------------------------------------------------------------------
// INPUTS -----------------------------------------------------------
// ------------------------------------------------------------------

layout(local_size_x = NUM_THREADS, local_size_y = NUM_THREADS, local_size_z = 1) in;

// ------------------------------------------------------------------
// DESCRIPTOR SETS --------------------------------------------------
// ------------------------------------------------------------------

layout(set = 0, binding = 0, rgba16f) uniform image2D i_ReprojectedColor;

layout(set = 1, binding = 0) uniform sampler2D s_Color;
layout(set = 2, binding = 0) uniform sampler2D s_PrevColor;

layout(set = 3, binding = 0) uniform sampler2D s_GBuffer1; // RGB: Albedo, A: Roughness
layout(set = 3, binding = 1) uniform sampler2D s_GBuffer2; // RGB: Normal, A: Metallic
layout(set = 3, binding = 2) uniform sampler2D s_GBuffer3; // RG: Motion Vector, BA: -
layout(set = 3, binding = 3) uniform sampler2D s_GBufferDepth;

layout(set = 4, binding = 0) uniform PerFrameUBO
{
    mat4  view_inverse;
    mat4  proj_inverse;
    mat4  view_proj_inverse;
    mat4  prev_view_proj;
    mat4  view_proj;
    vec4  cam_pos;
    Light light;
}
ubo;

// ------------------------------------------------------------------------
// PUSH CONSTANTS ---------------------------------------------------------
// ------------------------------------------------------------------------

layout(push_constant) uniform PushConstants
{
    uint first_frame;
    float alpha;
}
u_PushConstants;

// ------------------------------------------------------------------
// MAIN -------------------------------------------------------------
// ------------------------------------------------------------------

void main()
{
    ivec2 size      = textureSize(s_GBuffer1, 0);
    vec2 rcp_size = 1.0f / vec2(size);
    vec2  tex_coord = vec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y) / vec2(size);
    vec4 motion = texelFetch(s_GBuffer3, ivec2(gl_GlobalInvocationID.xy), 0);

    vec4 current = texelFetch(s_Color, ivec2(gl_GlobalInvocationID.xy), 0);

    if (u_PushConstants.first_frame == 1)
        imageStore(i_ReprojectedColor, ivec2(gl_GlobalInvocationID.xy), current);
    else
    {
        ivec2 prev_coord = ivec2(gl_GlobalInvocationID.xy) + ivec2(motion.xy * vec2(size)+ vec2(0.5, 0.5));
        vec4 prev = texelFetch(s_PrevColor, prev_coord, 0);
        imageStore(i_ReprojectedColor, ivec2(gl_GlobalInvocationID.xy), mix(prev, current, u_PushConstants.alpha));
    }
}

// ------------------------------------------------------------------