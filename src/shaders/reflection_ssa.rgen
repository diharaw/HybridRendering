#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : require

#define RAY_TRACING
#include "common.glsl"
#include "scene_descriptor_set.glsl"

// ------------------------------------------------------------------------
// DEFINES ----------------------------------------------------------------
// ------------------------------------------------------------------------

#define G_BUFFER_MIP 1

// ------------------------------------------------------------------------
// DESCRIPTOR SETS --------------------------------------------------------
// ------------------------------------------------------------------------

layout(set = 1, binding = 0, rgba16f) uniform image2D i_Color;

layout(set = 2, binding = 0) uniform PerFrameUBO
{
    mat4  view_inverse;
    mat4  proj_inverse;
    mat4  view_proj_inverse;
    mat4  prev_view_proj;
    mat4  view_proj;
    vec4  cam_pos;
    Light light;
}
ubo;

layout(set = 2, binding = 1) uniform sampler2D s_BlueNoise1;

layout(set = 3, binding = 0) uniform sampler2D s_GBuffer1; // RGB: Albedo, A: Roughness
layout(set = 3, binding = 1) uniform sampler2D s_GBuffer2; // RGB: Normal, A: Metallic
layout(set = 3, binding = 2) uniform sampler2D s_GBuffer3; // RG: Motion Vector, BA: -
layout(set = 3, binding = 3) uniform sampler2D s_GBufferDepth;

// ------------------------------------------------------------------------
// PUSH CONSTANTS ---------------------------------------------------------
// ------------------------------------------------------------------------

layout(push_constant) uniform PushConstants
{
    uint num_frames;
    float bias;
}
u_PushConstants;

// ------------------------------------------------------------------------
// PAYLOADS ---------------------------------------------------------------
// ------------------------------------------------------------------------

layout(location = 0) rayPayloadEXT ReflectionPayload p_PathTracePayload;

// ------------------------------------------------------------------------
// FUNCTIONS --------------------------------------------------------------
// ------------------------------------------------------------------------

vec3 ggx_dominant_direction(vec3 N, vec3 V, float linear_roughness)
{
    float s = 1.0 - linear_roughness;
    float dominant_factor = s * (sqrt(clamp(s, 0.0f, 1.0f)) + linear_roughness);

    vec3 R = reflect(-V, N);
    vec3 D = mix(N, R, dominant_factor);

    return normalize(D);
}

// ------------------------------------------------------------------------

vec3 world_position_from_depth(vec2 tex_coords, float ndc_depth)
{
    // Take texture coordinate and remap to [-1.0, 1.0] range.
    vec2 screen_pos = tex_coords * 2.0 - 1.0;

    // // Create NDC position.
    vec4 ndc_pos = vec4(screen_pos, ndc_depth, 1.0);

    // Transform back into world position.
    vec4 world_pos = ubo.view_proj_inverse * ndc_pos;

    // Undo projection.
    world_pos = world_pos / world_pos.w;

    return world_pos.xyz;
}

// ------------------------------------------------------------------------
// MAIN -------------------------------------------------------------------
// ------------------------------------------------------------------------

void main()
{
    p_PathTracePayload.rng = rng_init(gl_LaunchIDEXT.xy, u_PushConstants.num_frames);

    const ivec2 size          = textureSize(s_GBuffer1, G_BUFFER_MIP);
    const ivec2 current_coord = ivec2(gl_LaunchIDEXT.xy);
    const vec2  pixel_center  = vec2(current_coord) + vec2(0.5);
    const vec2  tex_coord     = pixel_center / vec2(size);

    float depth = texelFetch(s_GBufferDepth, current_coord, G_BUFFER_MIP).r;

    if (depth == 1.0f)
    {
        imageStore(i_Color, current_coord, vec4(0.0f, 0.0f, 0.0f, -1.0f));
        return;
    }

    float roughness = texelFetch(s_GBuffer1, current_coord, G_BUFFER_MIP).a;
    vec3  P         = world_position_from_depth(tex_coord, depth);
    vec3  N         = texelFetch(s_GBuffer2, current_coord, G_BUFFER_MIP).rgb;
    vec3  V        = normalize(ubo.cam_pos.xyz - P.xyz);

    uint  ray_flags  = gl_RayFlagsOpaqueEXT;
    uint  cull_mask  = 0xff;
    float tmin       = 0.001;
    float tmax       = 10000.0;
    vec3  ray_origin = P + N * u_PushConstants.bias;

    p_PathTracePayload.ray_length = 0.0f;

    vec3 R = ggx_dominant_direction(N, V, roughness);

    traceRayEXT(u_TopLevelAS, ray_flags, cull_mask, 0, 0, 0, ray_origin, tmin, R, tmax, 0);

    vec3 clamped_color = min(p_PathTracePayload.color, vec3(0.7f));

    imageStore(i_Color, current_coord, vec4(clamped_color, p_PathTracePayload.ray_length));
}

// ------------------------------------------------------------------------
