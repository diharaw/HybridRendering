#version 460

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#extension GL_EXT_nonuniform_qualifier : require

#define RAY_TRACING
#include "../common.glsl"
#include "../scene_descriptor_set.glsl"
#include "../bnd_sampler.glsl"

// ------------------------------------------------------------------
// DEFINES ----------------------------------------------------------
// ------------------------------------------------------------------

#define NUM_THREADS_X 8
#define NUM_THREADS_Y 4

// ------------------------------------------------------------------
// INPUTS -----------------------------------------------------------
// ------------------------------------------------------------------

layout(local_size_x = NUM_THREADS_X, local_size_y = NUM_THREADS_Y, local_size_z = 1) in;

// ------------------------------------------------------------------
// DESCRIPTOR SETS --------------------------------------------------
// ------------------------------------------------------------------

layout(set = 1, binding = 0, r32i) uniform image2D i_Output;

layout(set = 2, binding = 0) uniform PerFrameUBO
{
    mat4  view_inverse;
    mat4  proj_inverse;
    mat4  view_proj_inverse;
    mat4  prev_view_proj;
    mat4  view_proj;
    vec4  cam_pos;
    vec4  current_prev_jitter;
    Light light;
}
u_GlobalUBO;

layout(set = 3, binding = 0) uniform sampler2D s_GBuffer1; // RGB: Albedo, A: Metallic
layout(set = 3, binding = 1) uniform sampler2D s_GBuffer2; // RG: Normal, BA: Motion Vector
layout(set = 3, binding = 2) uniform sampler2D s_GBuffer3; // R: Roughness, G: Curvature, B: Mesh ID, A: Linear Z
layout(set = 3, binding = 3) uniform sampler2D s_GBufferDepth;

layout(set = 4, binding = 0) uniform sampler2D s_SobolSequence;
layout(set = 4, binding = 1) uniform sampler2D s_ScramblingRankingTile;

// ------------------------------------------------------------------------
// PUSH CONSTANTS ---------------------------------------------------------
// ------------------------------------------------------------------------

layout(push_constant) uniform PushConstants
{
    float bias;
    uint  num_frames;
    int   g_buffer_mip;
}
u_PushConstants;

// ------------------------------------------------------------------
// FUNCTIONS --------------------------------------------------------
// ------------------------------------------------------------------

vec3 world_position_from_depth(vec2 tex_coords, float ndc_depth)
{
    // Take texture coordinate and remap to [-1.0, 1.0] range.
    vec2 screen_pos = tex_coords * 2.0 - 1.0;

    // // Create NDC position.
    vec4 ndc_pos = vec4(screen_pos, ndc_depth, 1.0);

    // Transform back into world position.
    vec4 world_pos = u_GlobalUBO.view_proj_inverse * ndc_pos;

    // Undo projection.
    world_pos = world_pos / world_pos.w;

    return world_pos.xyz;
}

// ------------------------------------------------------------------------

bool query_visibility(vec3 world_pos, vec3 direction)
{
    float t_min     = 0.01f;
    float t_max     = 100000.0f;
    uint  ray_flags = gl_RayFlagsOpaqueEXT | gl_RayFlagsTerminateOnFirstHitEXT;

    // Initializes a ray query object but does not start traversal
    rayQueryEXT ray_query;

    rayQueryInitializeEXT(ray_query,
                          u_TopLevelAS,
                          ray_flags,
                          0xFF,
                          world_pos,
                          t_min,
                          direction,
                          t_max);

    // Start traversal: return false if traversal is complete
    while (rayQueryProceedEXT(ray_query)) {}

    // Returns type of committed (true) intersection
    if (rayQueryGetIntersectionTypeEXT(ray_query, true) != gl_RayQueryCommittedIntersectionNoneEXT)
        return false;

    return true;
}

// ------------------------------------------------------------------------

vec2 next_sample(ivec2 coord)
{
    return vec2(sample_blue_noise(coord, int(u_PushConstants.num_frames), 0, s_SobolSequence, s_ScramblingRankingTile),
                sample_blue_noise(coord, int(u_PushConstants.num_frames), 1, s_SobolSequence, s_ScramblingRankingTile));
}

// ------------------------------------------------------------------------

vec3 octohedral_to_direction(vec2 e)
{
    vec3 v = vec3(e, 1.0 - abs(e.x) - abs(e.y));
    if (v.z < 0.0)
        v.xy = (1.0 - abs(v.yx)) * (step(0.0, v.xy) * 2.0 - vec2(1.0));
    return normalize(v);
}

// ------------------------------------------------------------------
// SHARED -----------------------------------------------------------
// ------------------------------------------------------------------

shared bool g_visibility[NUM_THREADS_X][NUM_THREADS_Y];

// ------------------------------------------------------------------
// MAIN -------------------------------------------------------------
// ------------------------------------------------------------------

void main()
{
    const ivec2 size          = textureSize(s_GBuffer1, u_PushConstants.g_buffer_mip);
    const ivec2 current_coord = ivec2(gl_GlobalInvocationID.xy);
    const vec2  pixel_center  = vec2(current_coord) + vec2(0.5);
    const vec2  tex_coord     = pixel_center / vec2(size);

    float depth = texelFetch(s_GBufferDepth, current_coord, u_PushConstants.g_buffer_mip).r;

    if (depth == 1.0f)
    {
        imageStore(i_Output, current_coord, vec4(0.0f));
        return;
    }

    vec3 world_pos  = world_position_from_depth(tex_coord, depth);
    vec3 normal     = octohedral_to_direction(texelFetch(s_GBuffer2, current_coord, u_PushConstants.g_buffer_mip).rg);
    vec3 ray_origin = world_pos + normal * u_PushConstants.bias;

    // Trace ray
    vec2 rnd_sample = next_sample(current_coord);

    vec3 shadow_ray_dir;

    const Light light = u_GlobalUBO.light;

    if (light_type(light) == LIGHT_TYPE_DIRECTIONAL)
    {
        vec3 light_tangent   = normalize(cross(light_direction(light), vec3(0.0f, 1.0f, 0.0f)));
        vec3 light_bitangent = normalize(cross(light_tangent, light_direction(light)));

        // calculate disk point
        float point_radius = light_radius(light) * sqrt(rnd_sample.x);
        float point_angle  = rnd_sample.y * 2.0f * M_PI;
        vec2  disk_point   = vec2(point_radius * cos(point_angle), point_radius * sin(point_angle));
        shadow_ray_dir     = normalize(light_direction(light) + disk_point.x * light_tangent + disk_point.y * light_bitangent);
    }
    else
    {
        vec3  to_light       = light_position(light) - world_pos;
        vec3  light_dir      = normalize(to_light);
        float light_distance = length(to_light);
        float light_radius   = light_radius(light) / light_distance;

        vec3 light_tangent   = normalize(cross(light_dir, vec3(0.0f, 1.0f, 0.0f)));
        vec3 light_bitangent = normalize(cross(light_tangent, light_dir));

        // calculate disk point
        float point_radius = light_radius * sqrt(rnd_sample.x);
        float point_angle  = rnd_sample.y * 2.0f * M_PI;
        vec2  disk_point   = vec2(point_radius * cos(point_angle), point_radius * sin(point_angle));

        shadow_ray_dir = normalize(light_dir + disk_point.x * light_tangent + disk_point.y * light_bitangent);
    }

    g_visibility[gl_LocalInvocationIndex.x][gl_LocalInvocationIndex.y] = query_visibility(ray_origin, shadow_ray_dir);

    if (gl_LocalInvocationIndex == 0)
    {
        int result = 0;
        int idx = 0;

        for (int y = 0; y < NUM_THREADS_Y; y++)
        {
            for (int x = 0; x < NUM_THREADS_X; x++)
                result |= int(g_visibility[x][y]) << idx++;
        }

        // Store blended sample into the storage image
        imageStore(i_Output, gl_WorkGroupID.xy, ivec4(result));
    }
}

// ------------------------------------------------------------------