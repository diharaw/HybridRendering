#version 450

#extension GL_GOOGLE_include_directive : require

#include "../common.glsl"

// ------------------------------------------------------------------
// DEFINES ----------------------------------------------------------
// ------------------------------------------------------------------

#define NUM_THREADS 32

// ------------------------------------------------------------------
// INPUTS -----------------------------------------------------------
// ------------------------------------------------------------------

layout(local_size_x = NUM_THREADS, local_size_y = NUM_THREADS, local_size_z = 1) in;

// ------------------------------------------------------------------
// DESCRIPTOR SETS --------------------------------------------------
// ------------------------------------------------------------------

// Current Reprojection Write DS
layout(set = 0, binding = 0, rg16f) uniform writeonly image2D i_Output;
layout(set = 0, binding = 1, rgba16f) uniform writeonly image2D i_Moments;

// Current G-buffer DS
layout(set = 1, binding = 0) uniform sampler2D s_GBuffer1; // RGB: Albedo, A: Metallic
layout(set = 1, binding = 1) uniform sampler2D s_GBuffer2; // RG: Normal, BA: Motion Vector
layout(set = 1, binding = 2) uniform sampler2D s_GBuffer3; // R: Roughness, G: Curvature, B: Mesh ID, A: Linear Z
layout(set = 1, binding = 3) uniform sampler2D s_GBufferDepth;

// Previous G-Buffer DS
layout(set = 2, binding = 0) uniform sampler2D s_PrevGBuffer1; // RGB: Albedo, A: Metallic
layout(set = 2, binding = 1) uniform sampler2D s_PrevGBuffer2; // RG: Normal, BA: Motion Vector
layout(set = 2, binding = 2) uniform sampler2D s_PrevGBuffer3; // R: Roughness, G: Curvature, B: Mesh ID, A: Linear Z
layout(set = 2, binding = 3) uniform sampler2D s_PrevGBufferDepth;

// Input DS
layout(set = 3, binding = 0) uniform sampler2D s_Input;

// Prev Output
layout(set = 4, binding = 0) uniform sampler2D s_HistoryOutput;
layout(set = 4, binding = 1) uniform sampler2D s_HistoryMoments;

layout(set = 5, binding = 0) uniform PerFrameUBO
{
    mat4  view_inverse;
    mat4  proj_inverse;
    mat4  view_proj_inverse;
    mat4  prev_view_proj;
    mat4  view_proj;
    vec4  cam_pos;
    Light light;
}
u_GlobalUBO;

// ------------------------------------------------------------------
// PUSH CONSTANTS ---------------------------------------------------
// ------------------------------------------------------------------

layout(push_constant) uniform PushConstants
{
    float alpha;
    float moments_alpha;
    int   g_buffer_mip;
}
u_PushConstants;

// ------------------------------------------------------------------
// FUNCTIONS --------------------------------------------------------
// ------------------------------------------------------------------

bool plane_distance_disocclusion(vec3 current_pos, vec3 current_normal, vec3 history_pos, vec3 history_normal)
{
    vec3 to_current = current_pos - history_pos;
    float dist_to_plane = dot(to_current, current_normal);

    return dist_to_plane > 1.0f;
}

bool is_reprojection_valid(ivec2 coord, float z, float z_prev, vec3 normal, vec3 normal_prev, float mesh_id, float mesh_id_prev)
{
    const ivec2 imageDim = textureSize(s_HistoryOutput, 0);

    // check whether reprojected pixel is inside of the screen
    if (any(lessThan(coord, ivec2(1, 1))) || any(greaterThan(coord, imageDim - ivec2(1, 1)))) return false;

    // check if the history belongs to the same surface
    if (mesh_id != mesh_id_prev) return false;

    // check if deviation of depths is acceptable
    //if (abs(z_prev - z) / (fwidthZ + 1e-4) > 2.0) return false;

    // check normals for compatibility
    //if (distance(normal, normal_prev) / (fwidthNormal + 1e-2) > 16.0) return false;

    return true;
}

// ------------------------------------------------------------------------

vec3 octohedral_to_direction(vec2 e)
{
    vec3 v = vec3(e, 1.0 - abs(e.x) - abs(e.y));
    if (v.z < 0.0)
        v.xy = (1.0 - abs(v.yx)) * (step(0.0, v.xy) * 2.0 - vec2(1.0));
    return normalize(v);
}

// ------------------------------------------------------------------

float neighborhood_mean(ivec2 coord)
{
    float visibility_sum = 0.0f;

    int   radius = 4;
    float weight = (float(radius) * 2.0f + 1.0f) * (float(radius) * 2.0f + 1.0f);

    for (int dx = -radius; dx <= radius; dx++)
    {
        for (int dy = -radius; dy <= radius; dy++)
        {
            ivec2 sample_coord      = coord + ivec2(dx, dy);
            float sample_visibility = texelFetch(s_Input, sample_coord, 0).r;

            visibility_sum += sample_visibility;
        }
    }

    return visibility_sum / weight;
}

// ------------------------------------------------------------------

bool load_prev_data(ivec2 frag_coord, out float history_visibility, out vec2 history_moments, out float history_length)
{
    const ivec2 ipos     = frag_coord;
    const vec2  imageDim = vec2(textureSize(s_HistoryOutput, 0));

    vec4 center_g_buffer_2 = texelFetch(s_GBuffer2, ipos, u_PushConstants.g_buffer_mip);
    vec4 center_g_buffer_3 = texelFetch(s_GBuffer3, ipos, u_PushConstants.g_buffer_mip);

    vec3  normal  = octohedral_to_direction(center_g_buffer_2.xy);
    vec2  motion  = center_g_buffer_2.zw;
    float mesh_id = center_g_buffer_3.z;
    float depth   = center_g_buffer_3.w;

    // +0.5 to account for texel center offset
    const ivec2 ipos_prev = ivec2(vec2(ipos) + motion.xy * imageDim + vec2(0.5, 0.5));

    history_visibility = 0.0f;
    history_moments    = vec2(0.0f);

    bool       v[4];
    const vec2 pos_prev  = floor(frag_coord.xy) + motion.xy * imageDim;
    ivec2      offset[4] = { ivec2(0, 0), ivec2(1, 0), ivec2(0, 1), ivec2(1, 1) };

    // check for all 4 taps of the bilinear filter for validity
    bool valid = false;
    for (int sampleIdx = 0; sampleIdx < 4; sampleIdx++)
    {
        ivec2 loc = ivec2(pos_prev) + offset[sampleIdx];

        vec4 sample_g_buffer_2 = texelFetch(s_GBuffer2, loc, u_PushConstants.g_buffer_mip);
        vec4 sample_g_buffer_3 = texelFetch(s_GBuffer3, loc, u_PushConstants.g_buffer_mip);

        vec3  normal_prev  = octohedral_to_direction(sample_g_buffer_2.xy);
        float mesh_id_prev = sample_g_buffer_3.z;
        float depth_prev   = sample_g_buffer_3.w;

        v[sampleIdx] = is_reprojection_valid(ipos_prev, depth, depth_prev, normal, normal_prev, mesh_id, mesh_id_prev);

        valid = valid || v[sampleIdx];
    }

    if (valid)
    {
        float sumw = 0;
        float x    = fract(pos_prev.x);
        float y    = fract(pos_prev.y);

        // bilinear weights
        float w[4] = { (1 - x) * (1 - y),
                       x * (1 - y),
                       (1 - x) * y,
                       x * y };

        history_visibility = 0.0f;
        history_moments    = vec2(0.0f);

        // perform the actual bilinear interpolation
        for (int sampleIdx = 0; sampleIdx < 4; sampleIdx++)
        {
            ivec2 loc = ivec2(pos_prev) + offset[sampleIdx];

            if (v[sampleIdx])
            {
                history_visibility += w[sampleIdx] * texelFetch(s_HistoryOutput, loc, 0).r;
                history_moments += w[sampleIdx] * texelFetch(s_HistoryMoments, loc, 0).rg;
                sumw += w[sampleIdx];
            }
        }

        // redistribute weights in case not all taps were used
        valid              = (sumw >= 0.01);
        history_visibility = valid ? history_visibility / sumw : 0.0f;
        history_moments    = valid ? history_moments / sumw : vec2(0.0f);
    }
    if (!valid) // perform cross-bilateral filter in the hope to find some suitable samples somewhere
    {
        float cnt = 0.0;

        // this code performs a binary descision for each tap of the cross-bilateral filter
        const int radius = 1;
        for (int yy = -radius; yy <= radius; yy++)
        {
            for (int xx = -radius; xx <= radius; xx++)
            {
                ivec2 p = ipos_prev + ivec2(xx, yy);

                vec4 sample_g_buffer_2 = texelFetch(s_GBuffer2, p, u_PushConstants.g_buffer_mip);
                vec4 sample_g_buffer_3 = texelFetch(s_GBuffer3, p, u_PushConstants.g_buffer_mip);

                vec3  normal_prev  = octohedral_to_direction(sample_g_buffer_2.xy);
                float mesh_id_prev = sample_g_buffer_3.z;
                float depth_prev   = sample_g_buffer_3.w;

                if (is_reprojection_valid(ipos_prev, depth, depth_prev, normal, normal_prev, mesh_id, mesh_id_prev))
                {
                    history_visibility += texelFetch(s_HistoryOutput, p, 0).r;
                    history_moments += texelFetch(s_HistoryMoments, p, 0).rg;
                    cnt += 1.0;
                }
            }
        }
        if (cnt > 0)
        {
            valid = true;
            history_visibility /= cnt;
            history_moments /= cnt;
        }
    }

    if (valid)
        history_length = texelFetch(s_HistoryMoments, ipos_prev, 0).b;
    else
    {
        history_visibility = 0.0f;
        history_moments    = vec2(0.0f);
        history_length     = 0.0f;
    }

    return valid;
}

// ------------------------------------------------------------------------

vec3 world_position_from_depth(vec2 tex_coords, float ndc_depth)
{
    // Take texture coordinate and remap to [-1.0, 1.0] range.
    vec2 screen_pos = tex_coords * 2.0 - 1.0;

    // // Create NDC position.
    vec4 ndc_pos = vec4(screen_pos, ndc_depth, 1.0);

    // Transform back into world position.
    vec4 world_pos = u_GlobalUBO.view_proj_inverse * ndc_pos;

    // Undo projection.
    world_pos = world_pos / world_pos.w;

    return world_pos.xyz;
}

// ------------------------------------------------------------------
// MAIN -------------------------------------------------------------
// ------------------------------------------------------------------

void main()
{
    const ivec2 size          = textureSize(s_HistoryOutput, 0);
    const ivec2 current_coord = ivec2(gl_GlobalInvocationID.xy);
    const vec2  pixel_center  = vec2(current_coord) + vec2(0.5);
    const vec2  tex_coord     = pixel_center / vec2(size);

    float depth = texelFetch(s_GBufferDepth, current_coord, u_PushConstants.g_buffer_mip).r;

    if (depth == 1.0f)
    {
        imageStore(i_Output, current_coord, vec4(0.0f));
        imageStore(i_Moments, current_coord, vec4(0.0f));
        return;
    }

//    float visibility = texelFetch(s_Input, current_coord, 0).r;
//
//    float history_length;
//    float history_visibility;
//    vec2  history_moments;
//    bool  success  = load_prev_data(current_coord,
//                                  history_visibility,
//                                  history_moments,
//                                  history_length);
//    history_length = min(32.0f, success ? history_length + 1.0f : 1.0f);
//
//    if (success)
//    {
//        float mean             = neighborhood_mean(current_coord);
//        float spatial_variance = mean;
//        spatial_variance       = max(spatial_variance - mean * mean, 0.0f);
//
//        // Compute the clamping bounding box
//        const float std_deviation = sqrt(spatial_variance);
//        const float nmin          = mean - 0.5f * std_deviation;
//        const float nmax          = mean + 0.5f * std_deviation;
//
//        history_visibility = clamp(history_visibility, nmin, nmax);
//    }
//
//    // this adjusts the alpha for the case where insufficient history is available.
//    // It boosts the temporal accumulation to give the samples equal weights in
//    // the beginning.
//    const float alpha         = success ? max(u_PushConstants.alpha, 1.0 / history_length) : 1.0;
//    const float alpha_moments = success ? max(u_PushConstants.moments_alpha, 1.0 / history_length) : 1.0;
//
//    // compute first two moments of luminance
//    vec2 moments = vec2(0.0f);
//    moments.r    = visibility;
//    moments.g    = moments.r * moments.r;
//
//    // temporal integration of the moments
//    moments = mix(history_moments, moments, alpha_moments);
//
//    imageStore(i_Moments, current_coord, vec4(moments, history_length, 0.0f));
//
//    float variance = max(0.0f, moments.g - moments.r * moments.r);
//
//    float accumulated_visibility = mix(history_visibility, visibility, alpha);
//
//    // temporal integration
//    imageStore(i_Output, current_coord, vec4(accumulated_visibility, variance, 0.0f, 0.0f));

    vec4 current_g_buffer_2 = texelFetch(s_GBuffer2, current_coord, u_PushConstants.g_buffer_mip);
    vec4 current_g_buffer_3 = texelFetch(s_GBuffer3, current_coord, u_PushConstants.g_buffer_mip);

    vec3 current_pos = world_position_from_depth(tex_coord, depth);
    vec3 current_normal  = octohedral_to_direction(current_g_buffer_2.xy);
    vec2  current_motion  = current_g_buffer_2.zw;
    float current_mesh_id = current_g_buffer_3.z;

    const ivec2 prev_current_coord = ivec2(vec2(current_coord) + current_motion.xy * size + vec2(0.5f));

    vec4  history_g_buffer_2 = texelFetch(s_PrevGBuffer2, prev_current_coord, u_PushConstants.g_buffer_mip);
    vec4  history_g_buffer_3 = texelFetch(s_PrevGBuffer3, prev_current_coord, u_PushConstants.g_buffer_mip);

    vec2 history_tex_coord = tex_coord + current_motion.xy;
    float history_depth = texelFetch(s_PrevGBufferDepth, prev_current_coord, u_PushConstants.g_buffer_mip).r;
    vec3  history_pos = world_position_from_depth(history_tex_coord, history_depth);
    vec3  history_normal  = octohedral_to_direction(history_g_buffer_2.xy);
    vec2  history_motion  = history_g_buffer_2.zw;
    float history_mesh_id = history_g_buffer_3.z;

    bool depth_disocclusion = plane_distance_disocclusion(current_pos, history_pos, current_normal, history_normal); 

    imageStore(i_Output, current_coord, vec4(vec3(depth_disocclusion ? 0.0f : 1.0f), 0.0f));
}

// ------------------------------------------------------------------