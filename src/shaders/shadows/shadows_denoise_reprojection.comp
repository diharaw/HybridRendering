#version 450

// ------------------------------------------------------------------
// DEFINES ----------------------------------------------------------
// ------------------------------------------------------------------

#define NUM_THREADS 32

// ------------------------------------------------------------------
// INPUTS -----------------------------------------------------------
// ------------------------------------------------------------------

layout(local_size_x = NUM_THREADS, local_size_y = NUM_THREADS, local_size_z = 1) in;

// ------------------------------------------------------------------
// DESCRIPTOR SETS --------------------------------------------------
// ------------------------------------------------------------------

// Current Reprojection Write DS
layout(set = 0, binding = 0, rg16f) uniform writeonly image2D i_Output;
layout(set = 0, binding = 1, rgba16f) uniform writeonly image2D i_Moments;

// Current G-buffer DS
layout(set = 1, binding = 2) uniform sampler2D s_MotionVectors;
layout(set = 1, binding = 4) uniform sampler2D s_LinearZ;

// Previous G-Buffer DS
layout(set = 2, binding = 4) uniform sampler2D s_PrevLinearZ;

// Input DS
layout(set = 3, binding = 0) uniform sampler2D s_Input;

// Prev Output
layout(set = 4, binding = 0) uniform sampler2D s_HistoryOutput;
layout(set = 4, binding = 1) uniform sampler2D s_HistoryMoments;

// ------------------------------------------------------------------
// PUSH CONSTANTS ---------------------------------------------------
// ------------------------------------------------------------------

layout(push_constant) uniform PushConstants
{
    float alpha;
    float moments_alpha;
    int   g_buffer_mip;
}
u_PushConstants;

// ------------------------------------------------------------------
// FUNCTIONS --------------------------------------------------------
// ------------------------------------------------------------------

bool is_reprojection_valid(ivec2 coord, float Z, float Zprev, float fwidthZ, vec3 normal, vec3 normalPrev, float fwidthNormal)
{
    const ivec2 imageDim = textureSize(s_HistoryOutput, 0);
    // check whether reprojected pixel is inside of the screen
    if (any(lessThan(coord, ivec2(1, 1))) || any(greaterThan(coord, imageDim - ivec2(1, 1)))) return false;
    // check if deviation of depths is acceptable
    if (abs(Zprev - Z) / (fwidthZ + 1e-4) > 2.0) return false;
    // check normals for compatibility
    if (distance(normal, normalPrev) / (fwidthNormal + 1e-2) > 16.0) return false;

    return true;
}

// ------------------------------------------------------------------

vec3 octohedral_to_direction(uint octo)
{
    vec2 e = unpackSnorm2x16(octo);
    vec3 v = vec3(e, 1.0 - abs(e.x) - abs(e.y));
    if (v.z < 0.0)
        v.xy = (1.0 - abs(v.yx)) * (step(0.0, v.xy) * 2.0 - vec2(1.0));
    return normalize(v);
}

// ------------------------------------------------------------------

float neighborhood_mean(ivec2 coord)
{
    float visibility_sum = 0.0f;

    int   radius = 4;
    float weight = (float(radius) * 2.0f + 1.0f) * (float(radius) * 2.0f + 1.0f);

    for (int dx = -radius; dx <= radius; dx++)
    {
        for (int dy = -radius; dy <= radius; dy++)
        {
            ivec2 sample_coord = coord + ivec2(dx, dy);
            float sample_visibility = texelFetch(s_Input, sample_coord, 0).r;

            visibility_sum += sample_visibility;
        }
    }

    return visibility_sum / weight;
}

// ------------------------------------------------------------------

bool load_prev_data(ivec2 frag_coord, out float history_visibility, out vec2 history_moments, out float history_length)
{
    const ivec2 ipos     = frag_coord;
    const vec2  imageDim = vec2(textureSize(s_HistoryOutput, 0));

    // xy = motion, z = length(fwidth(pos)), w = length(fwidth(normal))
    vec4 motion = texelFetch(s_MotionVectors, ipos, u_PushConstants.g_buffer_mip);

    // +0.5 to account for texel center offset
    const ivec2 iposPrev = ivec2(vec2(ipos) + motion.xy * imageDim + vec2(0.5, 0.5));

    // stores: linearZ, maxChangeZ, prevLinearZ, objNorm
    vec4 depth  = texelFetch(s_LinearZ, ipos, u_PushConstants.g_buffer_mip);
    vec3 normal = octohedral_to_direction(floatBitsToUint(depth.w));

    history_visibility   = 0.0f;
    history_moments = vec2(0.0f);

    bool       v[4];
    const vec2 posPrev   = floor(frag_coord.xy) + motion.xy * imageDim;
    ivec2      offset[4] = { ivec2(0, 0), ivec2(1, 0), ivec2(0, 1), ivec2(1, 1) };

    // check for all 4 taps of the bilinear filter for validity
    bool valid = false;
    for (int sampleIdx = 0; sampleIdx < 4; sampleIdx++)
    {
        ivec2 loc        = ivec2(posPrev) + offset[sampleIdx];
        vec4  depthPrev  = texelFetch(s_PrevLinearZ, loc, u_PushConstants.g_buffer_mip);
        vec3  normalPrev = octohedral_to_direction(floatBitsToUint(depthPrev.w));

        v[sampleIdx] = is_reprojection_valid(iposPrev, depth.z, depthPrev.x, depth.y, normal, normalPrev, motion.w);

        valid = valid || v[sampleIdx];
    }

    if (valid)
    {
        float sumw = 0;
        float x    = fract(posPrev.x);
        float y    = fract(posPrev.y);

        // bilinear weights
        float w[4] = { (1 - x) * (1 - y),
                       x * (1 - y),
                       (1 - x) * y,
                       x * y };

        history_visibility   = 0.0f;
        history_moments = vec2(0.0f);

        // perform the actual bilinear interpolation
        for (int sampleIdx = 0; sampleIdx < 4; sampleIdx++)
        {
            ivec2 loc = ivec2(posPrev) + offset[sampleIdx];

            if (v[sampleIdx])
            {
                history_visibility += w[sampleIdx] * texelFetch(s_HistoryOutput, loc, 0).r;
                history_moments += w[sampleIdx] * texelFetch(s_HistoryMoments, loc, 0).rg;
                sumw += w[sampleIdx];
            }
        }

        // redistribute weights in case not all taps were used
        valid       = (sumw >= 0.01);
        history_visibility   = valid ? history_visibility / sumw : 0.0f;
        history_moments = valid ? history_moments / sumw : vec2(0.0f);
    }
    if (!valid) // perform cross-bilateral filter in the hope to find some suitable samples somewhere
    {
        float cnt = 0.0;

        // this code performs a binary descision for each tap of the cross-bilateral filter
        const int radius = 1;
        for (int yy = -radius; yy <= radius; yy++)
        {
            for (int xx = -radius; xx <= radius; xx++)
            {
                ivec2 p            = iposPrev + ivec2(xx, yy);
                vec4  depthFilter  = texelFetch(s_PrevLinearZ, p, u_PushConstants.g_buffer_mip);
                vec3  normalFilter = octohedral_to_direction(floatBitsToUint(depthFilter.w));

                if (is_reprojection_valid(iposPrev, depth.z, depthFilter.x, depth.y, normal, normalFilter, motion.w))
                {
                    history_visibility += texelFetch(s_HistoryOutput, p, 0).r;
                    history_moments += texelFetch(s_HistoryMoments, p, 0).rg;
                    cnt += 1.0;
                }
            }
        }
        if (cnt > 0)
        {
            valid = true;
            history_visibility /= cnt;
            history_moments /= cnt;
        }
    }

    if (valid)
        history_length = texelFetch(s_HistoryMoments, iposPrev, 0).b;
    else
    {
        history_visibility     = 0.0f;
        history_moments   = vec2(0.0f);
        history_length = 0.0f;
    }

    return valid;
}

// ------------------------------------------------------------------
// MAIN -------------------------------------------------------------
// ------------------------------------------------------------------

void main()
{
    ivec2 size      = textureSize(s_HistoryOutput, 0);
    vec2  tex_coord = vec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y) / vec2(size);

    float visibility = texelFetch(s_Input, ivec2(gl_GlobalInvocationID.xy), 0).r;

    float history_length;
    float history_visibility;
    vec2  history_moments;
    bool  success  = load_prev_data(ivec2(gl_GlobalInvocationID.xy),
                                  history_visibility,
                                  history_moments,
                                  history_length);
    history_length = min(32.0f, success ? history_length + 1.0f : 1.0f);

    if (success)
    {
        float mean = neighborhood_mean(ivec2(gl_GlobalInvocationID.xy));
        float spatial_variance = mean;
        spatial_variance = max(spatial_variance - mean * mean, 0.0f);

        // Compute the clamping bounding box
        const float std_deviation = sqrt(spatial_variance);
        const float nmin = mean - 0.5f * std_deviation;
        const float nmax = mean + 0.5f * std_deviation;

        history_visibility = clamp(history_visibility, nmin, nmax);
    }

    // this adjusts the alpha for the case where insufficient history is available.
    // It boosts the temporal accumulation to give the samples equal weights in
    // the beginning.
    const float alpha         = success ? max(u_PushConstants.alpha, 1.0 / history_length) : 1.0;
    const float alpha_moments = success ? max(u_PushConstants.moments_alpha, 1.0 / history_length) : 1.0;

    // compute first two moments of luminance
    vec2 moments = vec2(0.0f);
    moments.r    = visibility;
    moments.g    = moments.r * moments.r;

    // temporal integration of the moments
    moments = mix(history_moments, moments, alpha_moments);

    imageStore(i_Moments, ivec2(gl_GlobalInvocationID.xy), vec4(moments, history_length, 0.0f));

    float variance = max(0.0f, moments.g - moments.r * moments.r);

    float accumulated_visibility = mix(history_visibility, visibility, alpha);

    // temporal integration
    imageStore(i_Output, ivec2(gl_GlobalInvocationID.xy), vec4(accumulated_visibility, variance, 0.0f, 0.0f));
}

// ------------------------------------------------------------------