#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : require

#include "common.glsl"

layout(set = 0, binding = 0) uniform accelerationStructureNV u_TopLevelAS;

layout(set = 0, binding = 1, rgba16f) uniform image2D i_Reflections;

layout(set = 0, binding = 2) uniform sampler2D s_BlueNoise;

layout(set = 1, binding = 0) uniform PerFrameUBO
{
    mat4 view_inverse;
    mat4 proj_inverse;
    mat4 model;
    mat4 view;
    mat4 projection;
    vec4 cam_pos;
    vec4 light_dir;
}
ubo;

layout(set = 2, binding = 0) uniform sampler2D s_GBuffer1; // RGB: Albedo, A: Roughness
layout(set = 2, binding = 1) uniform sampler2D s_GBuffer2; // RGB: Normal, A: Metallic
layout(set = 2, binding = 2) uniform sampler2D s_GBuffer3; // RGB: Position, A: -

layout(location = 0) rayPayloadNV RayPayload ray_payload;

vec4 importance_sample_ggx(vec2 E, vec3 N, float Roughness)
{
    float a = Roughness * Roughness;
    float m2 = a * a;

    float phi      = 2.0f * M_PI * E.x;
    float cosTheta = sqrt((1.0f - E.y) / (1.0f + (m2 - 1.0f) * E.y));
    float sinTheta = sqrt(1.0f - cosTheta * cosTheta);

    // from spherical coordinates to cartesian coordinates - halfway vector
    vec3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;

    float d = (cosTheta * m2 - cosTheta) * cosTheta + 1;
    float D = m2 / (M_PI * d * d);

    float PDF = D * cosTheta;

    // from tangent-space H vector to world-space sample vector
    vec3 up        = abs(N.z) < 0.999f ? vec3(0.0f, 0.0f, 1.0f) : vec3(1.0f, 0.0f, 0.0f);
    vec3 tangent   = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);

    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return vec4(normalize(sampleVec), PDF);
}

void main()
{
    const vec2 pixel_center = vec2(gl_LaunchIDNV.xy) + vec2(0.5);
    const vec2 tex_coord    = pixel_center / vec2(gl_LaunchSizeNV.xy);
    vec2       d            = tex_coord * 2.0 - 1.0;

    float roughness = texture(s_GBuffer1, tex_coord).a;
    vec3 P = texture(s_GBuffer3, tex_coord).rgb;
    vec3 N   = texture(s_GBuffer2, tex_coord).rgb;
    vec3 V = normalize(P.xyz - ubo.cam_pos.xyz); 

    uint  ray_flags = gl_RayFlagsOpaqueNV;
    uint  cull_mask = 0xff;
    float tmin      = 0.001;
    float tmax      = 10000.0;

    vec4 color = vec4(0.0);

    if (roughness == 0.0f)
    {
        vec3 R = reflect(V, N.xyz);
        traceNV(u_TopLevelAS, ray_flags, cull_mask, 0, 0, 0, P, tmin, R, tmax, 0);
        color = vec4(ray_payload.color_dist.rgb, 1.0);      
    }
    
    imageStore(i_Reflections, ivec2(gl_LaunchIDNV.xy), color);
}
