#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : require

#define RAY_TRACING
#include "common.glsl"
#include "scene_descriptor_set.glsl"
#include "bnd_sampler.glsl"

// ------------------------------------------------------------------------
// DEFINES ----------------------------------------------------------------
// ------------------------------------------------------------------------

#define G_BUFFER_MIP 1
#define SAMPLER_WHITE_NOISE 0
#define SAMPLER_BLUE_NOISE_DISTRIBUTION 1

// ------------------------------------------------------------------------
// DESCRIPTOR SETS --------------------------------------------------------
// ------------------------------------------------------------------------

layout(set = 1, binding = 0, rgba16f) uniform image2D i_Color;

layout(set = 2, binding = 0) uniform PerFrameUBO
{
    mat4  view_inverse;
    mat4  proj_inverse;
    mat4  view_proj_inverse;
    mat4  prev_view_proj;
    mat4  view_proj;
    vec4  cam_pos;
    Light light;
}
ubo;

layout(set = 2, binding = 1) uniform sampler2D s_BlueNoise1;

layout(set = 3, binding = 0) uniform sampler2D s_GBuffer1; // RGB: Albedo, A: Roughness
layout(set = 3, binding = 1) uniform sampler2D s_GBuffer2; // RGB: Normal, A: Metallic
layout(set = 3, binding = 2) uniform sampler2D s_GBuffer3; // RG: Motion Vector, BA: -
layout(set = 3, binding = 3) uniform sampler2D s_GBufferDepth;

layout(set = 6, binding = 0) uniform sampler2D s_SobolSequence;
layout(set = 6, binding = 1) uniform sampler2D s_ScramblingRankingTile;

// ------------------------------------------------------------------------
// PUSH CONSTANTS ---------------------------------------------------------
// ------------------------------------------------------------------------

layout(push_constant) uniform PushConstants
{
    float bias;
    uint  num_frames;
    uint  sampler_type;
    uint vndf;
    float trim;
}
u_PushConstants;

// ------------------------------------------------------------------------
// PAYLOADS ---------------------------------------------------------------
// ------------------------------------------------------------------------

layout(location = 0) rayPayloadEXT ReflectionPayload p_PathTracePayload;

// ------------------------------------------------------------------------
// FUNCTIONS --------------------------------------------------------------
// ------------------------------------------------------------------------

vec2 sample_disk(vec2 Xi)
{
	float theta = 2 * M_PI * Xi.x;
	float radius = sqrt(Xi.y);
	return radius * vec2(cos(theta), sin(theta));
}

// ------------------------------------------------------------------------

mat3 get_tangent_basis(vec3 TangentZ)
{
    const float Sign = TangentZ.z >= 0 ? 1 : -1;
    const float a = -1.0f/(Sign + TangentZ.z);
    const float b = TangentZ.x * TangentZ.y * a;
	
    vec3 TangentX = { 1 + Sign * a * pow(TangentZ.x, 2), Sign * b, -Sign * TangentZ.x };
    vec3 TangentY = { b, Sign + a * pow(TangentZ.y, 2), -TangentZ.y };

    return mat3(TangentX, TangentY, TangentZ);
}

// ------------------------------------------------------------------------

vec4 importance_sample_ggx(vec2 E, vec3 N, float Roughness)
{
    float a  = Roughness * Roughness;
    float m2 = a * a;

    float phi      = 2.0f * M_PI * E.x;
    float cosTheta = sqrt((1.0f - E.y) / (1.0f + (m2 - 1.0f) * E.y));
    float sinTheta = sqrt(1.0f - cosTheta * cosTheta);

    // from spherical coordinates to cartesian coordinates - halfway vector
    vec3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;

    float d = (cosTheta * m2 - cosTheta) * cosTheta + 1;
    float D = m2 / (M_PI * d * d);

    float PDF = D * cosTheta;

    // from tangent-space H vector to world-space sample vector
    vec3 up        = abs(N.z) < 0.999f ? vec3(0.0f, 0.0f, 1.0f) : vec3(1.0f, 0.0f, 0.0f);
    vec3 tangent   = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);

    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return vec4(normalize(sampleVec), PDF);
}

// ------------------------------------------------------------------------

vec4 sampleGGXVNDF(vec3 Ve, float alpha_x, float alpha_y, float U1, float U2)
{
	// Section 3.2: transforming the view direction to the hemisphere configuration
	vec3 Vh = normalize(vec3(alpha_x * Ve.x, alpha_y * Ve.y, Ve.z));
	// Section 4.1: orthonormal basis (with special case if cross product is zero)
	float lensq = Vh.x * Vh.x + Vh.y * Vh.y;
	vec3 T1 = lensq > 0 ? vec3(-Vh.y, Vh.x, 0) * inversesqrt(lensq) : vec3(1,0,0);
	vec3 T2 = cross(Vh, T1);
	// Section 4.2: parameterization of the projected area
	float r = sqrt(U1);	
	float phi = 2.0 * M_PI * U2;	
	float t1 = r * cos(phi);
	float t2 = r * sin(phi);
	float s = 0.5 * (1.0 + Vh.z);
	t2 = (1.0 - s)*sqrt(1.0 - t1*t1) + s*t2;
	// Section 4.3: reprojection onto hemisphere
	vec3 Nh = t1*T1 + t2*T2 + sqrt(max(0.0f, 1.0f - t1*t1 - t2*t2))*Vh;
	// Section 3.4: transforming the normal back to the ellipsoid configuration
	vec3 Ne = normalize(vec3(alpha_x * Nh.x, alpha_y * Nh.y, max(0.0f, Nh.z)));	
	return vec4(Ne, 0.0f);
}

// ------------------------------------------------------------------------

vec3 world_position_from_depth(vec2 tex_coords, float ndc_depth)
{
    // Take texture coordinate and remap to [-1.0, 1.0] range.
    vec2 screen_pos = tex_coords * 2.0 - 1.0;

    // // Create NDC position.
    vec4 ndc_pos = vec4(screen_pos, ndc_depth, 1.0);

    // Transform back into world position.
    vec4 world_pos = ubo.view_proj_inverse * ndc_pos;

    // Undo projection.
    world_pos = world_pos / world_pos.w;

    return world_pos.xyz;
}

// ------------------------------------------------------------------------

vec2 next_sample(ivec2 coord, int index, RNG rng)
{
    if (u_PushConstants.sampler_type == SAMPLER_WHITE_NOISE)
        return next_vec2(rng);
    else if (u_PushConstants.sampler_type == SAMPLER_BLUE_NOISE_DISTRIBUTION)
        return vec2(sample_blue_noise(coord, int(u_PushConstants.num_frames), index * 2, s_SobolSequence, s_ScramblingRankingTile), 
                    sample_blue_noise(coord, int(u_PushConstants.num_frames), index * 2 + 1, s_SobolSequence, s_ScramblingRankingTile));
    else
        return vec2(0.0f);
}

// ------------------------------------------------------------------------
// MAIN -------------------------------------------------------------------
// ------------------------------------------------------------------------

void main()
{
    p_PathTracePayload.rng = rng_init(gl_LaunchIDEXT.xy, u_PushConstants.num_frames);

    const ivec2 size          = textureSize(s_GBuffer1, G_BUFFER_MIP);
    const ivec2 current_coord = ivec2(gl_LaunchIDEXT.xy);
    const vec2  pixel_center  = vec2(current_coord) + vec2(0.5);
    const vec2  tex_coord     = pixel_center / vec2(size);

    float depth = texelFetch(s_GBufferDepth, current_coord, G_BUFFER_MIP).r;

    if (depth == 1.0f)
    {
        imageStore(i_Color, current_coord, vec4(0.0f, 0.0f, 0.0f, -1.0f));
        return;
    }

    float roughness = texelFetch(s_GBuffer1, current_coord, G_BUFFER_MIP).a;
    vec3  P         = world_position_from_depth(tex_coord, depth);
    vec3  N         = texelFetch(s_GBuffer2, current_coord, G_BUFFER_MIP).rgb;
    vec3  Wo        = normalize(ubo.cam_pos.xyz - P.xyz);

    uint  ray_flags  = gl_RayFlagsOpaqueEXT;
    uint  cull_mask  = 0xff;
    float tmin       = 0.001;
    float tmax       = 10000.0;
    vec3  ray_origin = P + N * u_PushConstants.bias;

    float pdf = 0.0f;

    p_PathTracePayload.ray_length = 0.0f;

    if (roughness < 0.05f)
    {
        vec3 R = reflect(-Wo, N.xyz);
        traceRayEXT(u_TopLevelAS, ray_flags, cull_mask, 0, 0, 0, ray_origin, tmin, R, tmax, 0);
    }
    else
    {
        vec2 Xi = next_sample(current_coord, 0, p_PathTracePayload.rng) * u_PushConstants.trim;
        
        vec4 Wh_pdf;

        if (u_PushConstants.vndf == 1)
            Wh_pdf = sampleGGXVNDF(Wo, roughness, roughness, Xi.x, Xi.y);
        else
            Wh_pdf = importance_sample_ggx(Xi, N, roughness);

        pdf         = Wh_pdf.w;
        vec3 Wi     = reflect(-Wo, Wh_pdf.xyz);
        traceRayEXT(u_TopLevelAS, ray_flags, cull_mask, 0, 0, 0, ray_origin, tmin, Wi, tmax, 0);
    }

    vec3 clamped_color = min(p_PathTracePayload.color, vec3(0.7f));

    imageStore(i_Color, current_coord, vec4(clamped_color, p_PathTracePayload.ray_length));
}

// ------------------------------------------------------------------------
