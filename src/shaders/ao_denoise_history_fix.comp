#version 450

#extension GL_GOOGLE_include_directive : require

#include "random.glsl"

// ------------------------------------------------------------------
// DEFINES ----------------------------------------------------------
// ------------------------------------------------------------------

#define NUM_THREADS_X 32
#define NUM_THREADS_Y 32
#define G_BUFFER_MIP 1
#define MAX_HISTORY_FIX_LENGTH 8.0f
#define MAX_HISTORY_LENGTH 16.0f
#define MAX_NOISY_MIP_MAPS 4.0f

// ------------------------------------------------------------------
// INPUTS -----------------------------------------------------------
// ------------------------------------------------------------------

layout(local_size_x = NUM_THREADS_X, local_size_y = NUM_THREADS_Y, local_size_z = 1) in;

// ------------------------------------------------------------------
// DESCRIPTOR SETS --------------------------------------------------
// ------------------------------------------------------------------

layout(set = 0, binding = 0, r16f) uniform image2D i_Output;

layout(set = 1, binding = 0) uniform sampler2D s_NoisyInput;

layout(set = 2, binding = 0) uniform sampler2D s_AccumulatedInput;
layout(set = 2, binding = 1) uniform sampler2D s_HistoryLength;

layout(set = 3, binding = 0) uniform sampler2D s_GBuffer1; // RGB: Albedo, A: Roughness
layout(set = 3, binding = 1) uniform sampler2D s_GBuffer2; // RGB: Normal, A: Metallic
layout(set = 3, binding = 2) uniform sampler2D s_GBuffer3; // RG: Motion Vector, BA: -
layout(set = 3, binding = 3) uniform sampler2D s_GBufferDepth;

// ------------------------------------------------------------------
// PUSH CONSTANTS ---------------------------------------------------
// ------------------------------------------------------------------

layout(push_constant) uniform PushConstants
{
    uint enabled;
} u_PushConstants;

// ------------------------------------------------------------------
// MAIN -------------------------------------------------------------
// ------------------------------------------------------------------

void main()
{
    // Query the G-Buffer image size
    ivec2 size = textureSize(s_NoisyInput, 0);

    // Compute current pixel coord
    ivec2 current_coord = ivec2(gl_GlobalInvocationID.xy);
    const vec2  pixel_center  = vec2(current_coord) + vec2(0.5);
    const vec2  tex_coord     = pixel_center / vec2(size);

    // Skip pixel if it belongs to the background
    float depth = texelFetch(s_GBufferDepth, current_coord, G_BUFFER_MIP).r;

    if (depth == 1.0f)
    {
        imageStore(i_Output, current_coord, vec4(0.0f));
        return;
    }

    float ao_value = texelFetch(s_AccumulatedInput, current_coord, 0).r;
    float history_length = texelFetch(s_HistoryLength, current_coord, 0).r;

    if (history_length < MAX_HISTORY_FIX_LENGTH && u_PushConstants.enabled == 1)
    {
        float norm_length = 1.0f - (history_length / MAX_HISTORY_FIX_LENGTH);
        ao_value = textureLod(s_NoisyInput, tex_coord, MAX_NOISY_MIP_MAPS * norm_length).r;
    }

    // Store blurred ao
    imageStore(i_Output, current_coord, vec4(ao_value));
}

// ------------------------------------------------------------------