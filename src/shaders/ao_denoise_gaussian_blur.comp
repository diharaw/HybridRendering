#version 450

#extension GL_GOOGLE_include_directive : require

// ------------------------------------------------------------------
// DEFINES ----------------------------------------------------------
// ------------------------------------------------------------------

#define NUM_THREADS_X 32
#define NUM_THREADS_Y 32
#define G_BUFFER_MIP 1
#define DEPTH_FACTOR 0.5
#define GAUSS_BLUR_DEVIATION 1.5
#define PI 3.14159265359
#define USE_NORMAL_EDGE_STOPPING

// ------------------------------------------------------------------
// INPUTS -----------------------------------------------------------
// ------------------------------------------------------------------

layout(local_size_x = NUM_THREADS_X, local_size_y = NUM_THREADS_Y, local_size_z = 1) in;

// ------------------------------------------------------------------
// DESCRIPTOR SETS --------------------------------------------------
// ------------------------------------------------------------------

layout(set = 0, binding = 0, r16f) uniform image2D i_Output;

layout(set = 1, binding = 0) uniform sampler2D s_Input;

layout(set = 2, binding = 1) uniform sampler2D s_HistoryLength;

layout(set = 3, binding = 0) uniform sampler2D s_GBuffer1; // RGB: Albedo, A: Roughness
layout(set = 3, binding = 1) uniform sampler2D s_GBuffer2; // RGB: Normal, A: Metallic
layout(set = 3, binding = 2) uniform sampler2D s_GBuffer3; // RG: Motion Vector, BA: -
layout(set = 3, binding = 3) uniform sampler2D s_GBufferDepth;

// ------------------------------------------------------------------------
// PUSH CONSTANTS ---------------------------------------------------------
// ------------------------------------------------------------------------

layout(push_constant) uniform PushConstants
{
    vec4  z_buffer_params;
    ivec2 direction;
    int   radius;
}
u_PushConstants;

// ------------------------------------------------------------------
// SHARED MEMORY ----------------------------------------------------
// ------------------------------------------------------------------

shared float g_cached_ao[NUM_THREADS_X][NUM_THREADS_Y];
shared float g_cached_depth[NUM_THREADS_X][NUM_THREADS_Y];
#if defined(USE_NORMAL_EDGE_STOPPING)
shared vec3  g_cached_normal[NUM_THREADS_X][NUM_THREADS_Y];
#endif

// ------------------------------------------------------------------
// FUNCTIONS --------------------------------------------------------
// ------------------------------------------------------------------

float linear_eye_depth(float z)
{
    return 1.0 / (u_PushConstants.z_buffer_params.z * z + u_PushConstants.z_buffer_params.w);
}

// ------------------------------------------------------------------------

void populate_cache(ivec2 coord)
{
    ivec2 min_cached_coord = ivec2(gl_WorkGroupID.xy) * ivec2(NUM_THREADS_X, NUM_THREADS_Y);
    ivec2 cache_coord      = coord - min_cached_coord;

    g_cached_ao[cache_coord.x][cache_coord.y]     = texelFetch(s_Input, coord, 0).r;
    g_cached_depth[cache_coord.x][cache_coord.y]  = texelFetch(s_GBufferDepth, coord, G_BUFFER_MIP).r;    
#if defined(USE_NORMAL_EDGE_STOPPING)    
    g_cached_normal[cache_coord.x][cache_coord.y] = texelFetch(s_GBuffer2, coord, G_BUFFER_MIP).rgb;
#endif

    barrier();
}

// ------------------------------------------------------------------

float load_ao(ivec2 coord)
{
    ivec2 min_cached_coord = ivec2(gl_WorkGroupID.xy) * ivec2(NUM_THREADS_X, NUM_THREADS_Y);
    ivec2 max_cached_coord = ivec2(gl_WorkGroupID.x + 1, gl_WorkGroupID.y + 1) * ivec2(NUM_THREADS_X, NUM_THREADS_Y) - ivec2(1, 1);

    // If requested coord is outside of cache range, sample texture.
    if (any(lessThan(coord, min_cached_coord)) || any(greaterThan(coord, max_cached_coord)))
        return texelFetch(s_Input, coord, 0).r;
    else // Otherwise read from cache.
    {
        ivec2 cache_coord = coord - min_cached_coord;
        return g_cached_ao[cache_coord.x][cache_coord.y];
    }
}

// ------------------------------------------------------------------

float load_depth(ivec2 coord)
{
    ivec2 min_cached_coord = ivec2(gl_WorkGroupID.xy) * ivec2(NUM_THREADS_X, NUM_THREADS_Y);
    ivec2 max_cached_coord = ivec2(gl_WorkGroupID.x + 1, gl_WorkGroupID.y + 1) * ivec2(NUM_THREADS_X, NUM_THREADS_Y) - ivec2(1, 1);

    // If requested coord is outside of cache range, sample texture.
    if (any(lessThan(coord, min_cached_coord)) || any(greaterThan(coord, max_cached_coord)))
        return texelFetch(s_GBufferDepth, coord, G_BUFFER_MIP).r;
    else // Otherwise read from cache.
    {
        ivec2 cache_coord = coord - min_cached_coord;
        return g_cached_depth[cache_coord.x][cache_coord.y];
    }
}

// ------------------------------------------------------------------

#if defined(USE_NORMAL_EDGE_STOPPING)
vec3 load_normal(ivec2 coord)
{
    ivec2 min_cached_coord = ivec2(gl_WorkGroupID.xy) * ivec2(NUM_THREADS_X, NUM_THREADS_Y);
    ivec2 max_cached_coord = ivec2(gl_WorkGroupID.x + 1, gl_WorkGroupID.y + 1) * ivec2(NUM_THREADS_X, NUM_THREADS_Y) - ivec2(1, 1);

    // If requested coord is outside of cache range, sample texture.
    if (any(lessThan(coord, min_cached_coord)) || any(greaterThan(coord, max_cached_coord)))
        return texelFetch(s_GBuffer2, coord, G_BUFFER_MIP).rgb;
    else // Otherwise read from cache.
    {
        ivec2 cache_coord = coord - min_cached_coord;
        return g_cached_normal[cache_coord.x][cache_coord.y];
    }
}
#endif

// ------------------------------------------------------------------

float gaussian_weight(float offset, float deviation)
{
    float weight = 1.0 / sqrt(2.0 * PI * deviation * deviation);
    weight *= exp(-(offset * offset) / (2.0 * deviation * deviation));
    return weight;
}

// ------------------------------------------------------------------------

float normal_edge_stopping_weight(vec3 center_normal, vec3 sample_normal)
{
    return pow(abs(dot(center_normal, sample_normal)), 32);
}

// ------------------------------------------------------------------------

float depth_edge_stopping_weight(float center_lin_depth, float sample_lin_depth)
{
    float depth_diff = abs(center_lin_depth - sample_lin_depth);
    float d_factor   = depth_diff * DEPTH_FACTOR;
    return exp(-(d_factor * d_factor));
}

// ------------------------------------------------------------------

float bilateral_blur(ivec2 current_coord)
{
    const float deviation = float(u_PushConstants.radius) / GAUSS_BLUR_DEVIATION;

    float center_depth  = linear_eye_depth(load_depth(current_coord));
#if defined(USE_NORMAL_EDGE_STOPPING)      
    vec3  center_normal = load_normal(current_coord);
#endif

    int radius = u_PushConstants.radius;

    float total_ao     = 0.0f;
    float total_weight = 0.0f;

    for (int i = -radius; i <= radius; i++)
    {
        ivec2 sample_coord  = current_coord + u_PushConstants.direction * ivec2(i);
        float sample_ao     = load_ao(sample_coord);
        float sample_depth  = linear_eye_depth(load_depth(sample_coord));
#if defined(USE_NORMAL_EDGE_STOPPING)  
        vec3  sample_normal = load_normal(sample_coord);
#endif

        float weight = gaussian_weight(float(i), deviation);
        weight *= depth_edge_stopping_weight(center_depth, sample_depth);
#if defined(USE_NORMAL_EDGE_STOPPING)          
        weight *= normal_edge_stopping_weight(center_normal, sample_normal);
#endif

        total_ao += weight * sample_ao;
        total_weight += weight;
    }

    return total_ao / max(total_weight, 0.0001f);
}

// ------------------------------------------------------------------
// MAIN -------------------------------------------------------------
// ------------------------------------------------------------------

void main()
{
    // Query the G-Buffer image size
    ivec2 size = textureSize(s_GBuffer1, G_BUFFER_MIP);

    // Compute current pixel coord
    ivec2 current_coord = ivec2(gl_GlobalInvocationID.xy);

    // Populate LDS cache
    populate_cache(current_coord);

    // Skip pixel if it belongs to the background
    float depth = load_depth(current_coord);

    if (depth == 1.0f)
    {
        imageStore(i_Output, current_coord, vec4(0.0f));
        return;
    }

    // Blur
    float ao = bilateral_blur(current_coord);

    // Store blurred ao
    imageStore(i_Output, current_coord, vec4(ao));
}

// ------------------------------------------------------------------