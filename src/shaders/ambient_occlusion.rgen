#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : require

#define RAY_TRACING
#include "common.glsl"
#include "scene_descriptor_set.glsl"

// ------------------------------------------------------------------------
// DESCRIPTOR SETS --------------------------------------------------------
// ------------------------------------------------------------------------

layout(set = 1, binding = 0, rgba16f) uniform image2D i_AmbientOcclusion;

layout(set = 2, binding = 0) uniform PerFrameUBO
{
    mat4  view_inverse;
    mat4  proj_inverse;
    mat4  view_proj_inverse;
    mat4  prev_view_proj;
    mat4  view_proj;
    vec4  cam_pos;
    Light light;
}
ubo;

layout(set = 3, binding = 1) uniform sampler2D s_GBuffer2; // RGB: Normal, A: Metallic
layout(set = 3, binding = 3) uniform sampler2D s_GBufferDepth;

// ------------------------------------------------------------------------
// PAYLOADS ---------------------------------------------------------------
// ------------------------------------------------------------------------

layout(location = 0) rayPayloadEXT bool visibility_payload;

// ------------------------------------------------------------------------
// PUSH CONSTANTS ---------------------------------------------------------
// ------------------------------------------------------------------------

layout(push_constant) uniform PushConstants
{
    uint  num_rays;
    uint  num_frames;
    float ray_length;
    float power;
    float bias;
    uint  g_buffer_mip;
}
u_PushConstants;

// ------------------------------------------------------------------------
// FUNCTIONS --------------------------------------------------------------
// ------------------------------------------------------------------------

vec3 world_position_from_depth(vec2 tex_coords, float ndc_depth)
{
    // Take texture coordinate and remap to [-1.0, 1.0] range.
    vec2 screen_pos = tex_coords * 2.0 - 1.0;

    // // Create NDC position.
    vec4 ndc_pos = vec4(screen_pos, ndc_depth, 1.0);

    // Transform back into world position.
    vec4 world_pos = ubo.view_proj_inverse * ndc_pos;

    // Undo projection.
    world_pos = world_pos / world_pos.w;

    return world_pos.xyz;
}

// ------------------------------------------------------------------------

mat3 make_rotation_matrix(vec3 z)
{
    const vec3 ref = abs(dot(z, vec3(0, 1, 0))) > 0.99f ? vec3(0, 0, 1) : vec3(0, 1, 0);

    const vec3 x = normalize(cross(ref, z));
    const vec3 y = cross(z, x);

    return mat3(x, y, z);
}

// ------------------------------------------------------------------------

vec3 sample_cosine_lobe(in vec3 n, in vec2 r)
{
    vec2 rand_sample = max(vec2(0.00001f), r);

    const float phi = 2.0f * M_PI * rand_sample.y;

    const float cos_theta = sqrt(rand_sample.x);
    const float sin_theta = sqrt(1 - rand_sample.x);

    vec3 t = vec3(sin_theta * cos(phi), sin_theta * sin(phi), cos_theta);

    return normalize(make_rotation_matrix(n) * t);
}

// ------------------------------------------------------------------------
// MAIN -------------------------------------------------------------------
// ------------------------------------------------------------------------

void main()
{
    RNG rng = rng_init(gl_LaunchIDEXT.xy, u_PushConstants.num_frames);

    // Compute current pixel coord
    const ivec2 current_coord = ivec2(gl_LaunchIDEXT.xy);
    const vec2  pixel_center  = vec2(current_coord) + vec2(0.5);
    const vec2  tex_coord     = pixel_center / vec2(gl_LaunchSizeEXT.xy);
    vec2        d             = tex_coord * 2.0 - 1.0;

    float depth = texelFetch(s_GBufferDepth, current_coord, u_PushConstants.g_buffer_mip).r;

    if (depth == 1.0f)
    {
        imageStore(i_AmbientOcclusion, current_coord, vec4(0.0f));
        return;
    }

    vec3 position = world_position_from_depth(tex_coord, texelFetch(s_GBufferDepth, current_coord, u_PushConstants.g_buffer_mip).r);
    vec3 normal   = texelFetch(s_GBuffer2, current_coord, u_PushConstants.g_buffer_mip).rgb;

    vec3  ray_origin = position + normal * u_PushConstants.bias;
    uint  ray_flags  = gl_RayFlagsOpaqueEXT | gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsSkipClosestHitShaderEXT;
    uint  cull_mask  = 0xff;
    float tmin       = 0.1;
    float tmax       = u_PushConstants.ray_length;

    float ao = 0.0f;

    for (uint i = 0; i < u_PushConstants.num_rays; i++)
    {
        vec2 rnd_sample = next_vec2(rng);

        vec3 sample_direction = sample_cosine_lobe(normal, rnd_sample);

        visibility_payload = false;
        traceRayEXT(u_TopLevelAS, ray_flags, cull_mask, 0, 0, 0, ray_origin, tmin, sample_direction, tmax, 0);

        ao += visibility_payload ? 1.0f : 0.0f;
    }

    ao = pow(ao / float(u_PushConstants.num_rays), u_PushConstants.power);

    vec4 visibility = imageLoad(i_AmbientOcclusion, current_coord);

    visibility.y = ao;

    imageStore(i_AmbientOcclusion, current_coord, visibility);
}

// ------------------------------------------------------------------------